@inherits LayoutComponentBase
@using Blazored.Toast.Configuration
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavMgr
@inject IJSRuntime jsRuntime
@inject UserProfileService Userservice
<PageTitle>Sedulur App</PageTitle>

<div class="web-none d-flex align-items-center px-3 pt-3">
    <a href="index" class="text-decoration-none">
        <img src="img/logo.svg" class="img-fluid logo-mobile" alt="brand-logo">
    </a>
    <button class="ms-auto btn btn-primary ln-0" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasExample" aria-controls="offcanvasExample">
        <span class="material-icons">menu</span>
    </button>
</div>
<div class="py-4">
    <div class="container">
        <CascadingValue Value="this">
        <div class="row position-relative">
            <!-- Main Content -->
            @Body
            <SideMenu></SideMenu>
            <RightPanel></RightPanel>
        </div>
        </CascadingValue>
    </div>
</div>
<div class="py-3 bg-white footer-copyright">
   <FooterPage></FooterPage>
</div>
<!-- Post Modal -->
<PostPage NewPost="NewPost"></PostPage>
<!-- Forget Modal -->
<ForgotPasswordPage></ForgotPasswordPage>
<!-- Register Modal -->
<RegisterPage></RegisterPage>
<!-- Sign In Modal -->
<LoginPage></LoginPage>
<!-- Language Modal -->
<LanguagePage></LanguagePage>
<!-- Comment Modal -->
<CommentPage NewComment="NewComment" @ref="ThisCommentPage" CurrentPost="CurrentPost"></CommentPage>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="10"
                SuccessClass="success-toast-override"
                SuccessIconClass="fa fa-thumbs-up"
                ErrorIconClass="fa fa-bug" />

@code {

    [Parameter]
    public CommentPage ThisCommentPage{ set; get; }

    [Parameter]
    public Post CurrentPost { get; set; } 

    [Parameter]
    public Post NewPost { get; set; } 

    [Parameter]
    public PostComment NewComment { get; set; }

    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    async Task Keluar()
    {
        NavMgr.NavigateTo($"/logout", true);
        //await localStorage.SetItemAsync(AppConstants.NameKey, "");
        //NavMgr.NavigateTo($"/login");
    }
    public async Task RefreshPage(bool IsSuccess)
    {
        await InvokeAsync(StateHasChanged);
    }
   
    
    //private void PostDataChanged()
    //{
    //    StateHasChanged();
    //}

    string Nama = "Saya";
    protected override async Task OnInitializedAsync()
    {

        
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            var UserName = user.Identity.Name;
            Nama = Userservice.GetUserByEmail(UserName)?.FullName;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {



    }

}