@inject PostService PostSvc
@inject IJSRuntime IJS
@inject UserProfileService UserSvc
<div class="pt-4 feeds">
    @if (ListPost != null)
        @foreach (var post in ListPost)
        {
            <!-- Feed Item -->
            <div class="bg-white p-3 feed-item rounded-4 mb-3 shadow-sm">
                <div class="d-flex">
                    <img src="@(string.IsNullOrEmpty(post.User.PicUrl)?"img/img-user.jpg" : post.User.PicUrl)" class="img-fluid rounded-circle user-img" alt="profile-img">
                    <div class="d-flex ms-3 align-items-start w-100">
                        <div class="w-100">
                            <div class="d-flex align-items-center justify-content-between">
                                <a href="@($"profile/{post.User.Username}")" class="text-decoration-none d-flex align-items-center">
                                    <h6 class="fw-bold mb-0 text-body">@post.User.FullName</h6>
                                    @if (post.User.IsBlueBadge)
                                    {
                                        <span class="ms-2 material-icons bg-primary p-0 md-16 fw-bold text-white rounded-circle ov-icon">done</span>
                                    }
                                    <small class="text-muted ms-2">@($"@{post.UserName}")</small>
                                </a>
                                <div class="d-flex align-items-center small">
                                    <p class="text-muted mb-0">@post.CreatedDate.ToString("dd MMM yyyy")</p>
                                    <div class="dropdown">
                                        <a href="" class="text-muted text-decoration-none material-icons ms-2 md-20 rounded-circle bg-light p-1" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">more_vert</a>
                                        <ul class="dropdown-menu fs-13 dropdown-menu-end" aria-labelledby="dropdownMenuButton1">
                                            <li><a class="dropdown-item text-muted" href="#"><span class="material-icons md-13 me-1">edit</span>Edit</a></li>
                                            <li><a class="dropdown-item text-muted" href="#"><span class="material-icons md-13 me-1">delete</span>Delete</a></li>
                                            <li><a class="dropdown-item text-muted" href="#"><span class="material-icons md-13 me-1 ltsp-n5">arrow_back_ios arrow_forward_ios</span>Embed Vogel</a></li>
                                            <li><a class="dropdown-item text-muted d-flex align-items-center" href="#"><span class="material-icons md-13 me-1">share</span>Share via another apps</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="my-2">
                                <p class="mb-3 text-info">@((MarkupString)post.Message.ParseURL().ParseUsername().ParseHashtag())</p>

                                @if (!string.IsNullOrEmpty(post.ImageUrls))
                                {
                                    <a href="#" @onclick:preventDefault class="text-decoration-none" @onclick="(()=>OpenComment(post))">
                                        <img src="@post.ImageUrls" class="img-fluid rounded mb-3" alt="post-img">
                                    </a>
                                }
                            <div class="d-flex align-items-center justify-content-between mb-2">
                                @if (IsLogin)
                                {
                                    <div>
                                        @{
                                            var like = LikeList[post.Id];
                                        }
                                            <a href="" @onclick:preventDefault @onclick="(() => TogglePostLike(post, like))" class="text-muted text-decoration-none d-flex align-items-start fw-light"><span class="material-icons md-20 me-2">@(like ? "thumb_up_on" : "thumb_up_off_alt")</span><span>@(post.PostLikes == null ? 0 : post.PostLikes.Count())</span></a>
                                    </div>
                                }
                                else
                                {
                                    <a href="" @onclick:preventDefault class="text-muted text-decoration-none d-flex align-items-start fw-light"><span class="material-icons md-20 me-2">thumb_up_off_alt</span><span>@(post.PostLikes == null ? 0 : post.PostLikes.Count())</span></a>
                                }
                                <div>
                                        <a href="" @onclick:preventDefault class="text-muted text-decoration-none d-flex align-items-start fw-light"><span class="material-icons md-20 me-2">chat_bubble_outline</span><span>@(post.PostComments == null ? 0 : post.PostComments.Count())</span></a>
                                </div>
                                <div>
                                        <a href="" @onclick:preventDefault class="text-muted text-decoration-none d-flex align-items-start fw-light"><span class="material-icons md-20 me-2">repeat</span><span>@(post.Reposts == null ? 0 : post.Reposts.Count())</span></a>
                                </div>
                                <div>
                                        <a href="" @onclick:preventDefault class="text-muted text-decoration-none d-flex align-items-start fw-light"><span class="material-icons md-18 me-2">share</span><span>Share</span></a>
                                </div>
                            </div>
                                <div class="d-flex align-items-center mb-3" @onclick="(()=>OpenComment(post))">
                                    <span class="material-icons bg-white border-0 text-primary pe-2 md-36">account_circle</span>
                                    <input type="text" class="form-control form-control-sm rounded-3 fw-light" placeholder="Write Your comment">
                                </div>
                                <div class="comments">
                                    @if (post.PostComments != null)
                                    {
                                        @foreach (var comment in post.PostComments)
                                        {

                                            <div class="d-flex mb-2">
                                                <a href="#" @onclick:preventDefault class="text-dark text-decoration-none" @onclick="(()=>OpenComment(post))">
                                                    <img src="@( string.IsNullOrEmpty( comment.User?.PicUrl) ? "img/img-user.jpg":comment.User?.PicUrl)" class="img-fluid rounded-circle" alt="commenters-img">
                                                </a>
                                                <div class="ms-2 small">
                                                    <a href="#" @onclick:preventDefault class="text-dark text-decoration-none" @onclick="(()=>OpenComment(post))">
                                                        <div class="bg-light px-3 py-2 rounded-4 mb-1 chat-text">
                                                            <p class="fw-500 mb-0">@comment.User?.FullName</p>
                                                            <span class="text-muted">@comment.Comment</span>
                                                        </div>
                                                    </a>
                                                    <div class="d-flex align-items-center ms-2">
                                                        <a href="" @onclick:preventDefault class="small text-muted text-decoration-none">Like</a>
                                                        <span class="fs-3 text-muted material-icons mx-1">circle</span>
                                                        <a href="" @onclick:preventDefault class="small text-muted text-decoration-none">Reply</a>
                                                        <span class="fs-3 text-muted material-icons mx-1">circle</span>
                                                        <span class="small text-muted">@(DateHelper.GetElapsedTime(comment.CreatedDate))</span>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
</div>
@code {
    public enum FeedTypes { Timeline, OnlyMe, Liked, Repost, Mention, Trending }

    [Parameter]
    public string Keyword { get; set; }

    [Parameter]
    public FeedTypes FeedType { get; set; } = FeedTypes.Timeline;
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    [Parameter]
    public string UserName { get; set; }

    public List<Post> ListPost { get; set; }

    Dictionary<long, bool> LikeList = new();

    async Task OpenComment(Post post)
    {
        Layout.CurrentPost = post;
        Layout.NewComment = new();
        //data-bs-toggle="modal" data-bs-target="#commentModal"
        await IJS.InvokeVoidAsync("ShowModal", "commentModal");

        //Layout.ThisCommentPage.Refresh();


    }

    async Task TogglePostLike(Post post, bool Like)
    {
        Like = !Like;
        if (Like)
        {
            PostSvc.LikePost(selUser.Id, selUser.Username, post.Id);
        }
        else
        {
            PostSvc.UnLikePost(selUser.Id, post.Id);
        }
        LikeList[post.Id] = Like;
    }

    public void Refresh()
    {
        LoadData();
        StateHasChanged();
    }

    void LoadData()
    {
        switch (FeedType)
        {
            case FeedTypes.Timeline:
                {
                    ListPost = PostSvc.GetTimeline(UserName);
                    if (!string.IsNullOrEmpty(Username))
                    {
                        LikeList.Clear();
                        ListPost.ForEach(x =>
                        {
                            if (x.PostLikes != null)
                            {
                                LikeList.Add(x.Id, x.PostLikes.Any(c => c.LikedByUserId == selUser.Id));
                            }
                            else
                            {
                                LikeList.Add(x.Id, false);
                            }
                        });

                    }
                }
                break;
            case FeedTypes.OnlyMe:
                {
                    ListPost = PostSvc.GetMyTimeline(UserName);
                    if (!string.IsNullOrEmpty(Username))
                    {
                        LikeList.Clear();
                        ListPost.ForEach(x =>
                        {
                            if (x.PostLikes != null)
                            {
                                LikeList.Add(x.Id, x.PostLikes.Any(c => c.LikedByUserId == selUser.Id));
                            }
                            else
                            {
                                LikeList.Add(x.Id, false);
                            }
                        });

                    }
                }
                break;
            case FeedTypes.Liked:
                {
                    ListPost = PostSvc.GetLikedPosts(UserName);
                    if (!string.IsNullOrEmpty(Username))
                    {
                        LikeList.Clear();
                        ListPost.ForEach(x =>
                        {
                            if (x.PostLikes != null)
                            {
                                LikeList.Add(x.Id, x.PostLikes.Any(c => c.LikedByUserId == selUser.Id));
                            }
                            else
                            {
                                LikeList.Add(x.Id, false);
                            }
                        });

                    }
                }
                break;
            case FeedTypes.Repost:
                {
                    ListPost = PostSvc.GetRepost(UserName);
                    if (!string.IsNullOrEmpty(Username))
                    {
                        LikeList.Clear();
                        ListPost.ForEach(x =>
                        {
                            if (x.PostLikes != null)
                            {
                                LikeList.Add(x.Id, x.PostLikes.Any(c => c.LikedByUserId == selUser.Id));
                            }
                            else
                            {
                                LikeList.Add(x.Id, false);
                            }
                        });

                    }
                }
                break;
            case FeedTypes.Mention:
                {
                    ListPost = PostSvc.GetPostMentions(UserName);
                    if (!string.IsNullOrEmpty(Username))
                    {
                        LikeList.Clear();
                        ListPost.ForEach(x =>
                        {
                            if (x.PostLikes != null)
                            {
                                LikeList.Add(x.Id, x.PostLikes.Any(c => c.LikedByUserId == selUser.Id));
                            }
                            else
                            {
                                LikeList.Add(x.Id, false);
                            }
                        });

                    }
                }
                break;
            case FeedTypes.Trending:
                {
                    if (!string.IsNullOrEmpty(Keyword))
                        ListPost = PostSvc.FindByKeyword(Keyword);
                    else
                        ListPost = PostSvc.GetTrendingPosts();
                    if (!string.IsNullOrEmpty(Username))
                    {
                        LikeList.Clear();
                        ListPost.ForEach(x =>
                        {
                            if (x.PostLikes != null)
                            {
                                LikeList.Add(x.Id, x.PostLikes.Any(c => c.LikedByUserId == selUser.Id));
                            }
                            else
                            {
                                LikeList.Add(x.Id, false);
                            }
                        });

                    }
                }
                break;
        }



    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string Username;
    UserProfile selUser;
    bool IsLogin = false;
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            IsLogin = true;
            Username = user.Identity.Name;
            selUser = UserSvc.GetItemByUsername(Username);

        }

        LoadData();
    }
    }
