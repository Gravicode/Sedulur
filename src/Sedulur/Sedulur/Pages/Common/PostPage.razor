@inject NavigationManager NavMgr
@inject AzureBlobHelper AzureBlobHelper;
@inject IJSRuntime IJS
@using System.IO
@using System.Text.Json
@using Sedulur.Helpers;
@using System.Text.RegularExpressions;
@inject IToastService toastService
@inject UserProfileService UserSvc
@inject PostService PostSvc
@inject TrendingService TrendingSvc

<div class="modal fade" id="postModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-4 p-4 border-0 bg-light">
            <div class="modal-header d-flex align-items-center justify-content-start border-0 p-0 mb-3">
                <a href="#" class="text-muted text-decoration-none material-icons" data-bs-dismiss="modal">arrow_back_ios_new</a>
                <h5 class="modal-title text-muted ms-3 ln-0" id="staticBackdropLabel"><span class="material-icons md-32">account_circle</span></h5>
            </div>
            <div class="modal-body p-0 mb-3">
                <div class="form-floating">
                    <textarea class="form-control rounded-5 border-0 shadow-sm" @bind="NewPost.Message" placeholder="Leave a comment here" id="floatingTextarea2" style="height: 200px"></textarea>
                    <label for="floatingTextarea2" class="h6 text-muted mb-0">What's on your mind...</label>
                </div>
            </div>
            <div class="modal-footer justify-content-start px-1 py-1 bg-white shadow-sm rounded-5">
                <div class="rounded-4 m-0 px-3 py-2 d-flex align-items-center justify-content-between w-75">
                    <a href="#" @onclick="(()=>PrepareUpload(UploadTypes.Doc))" for="fileInput1" class="text-muted text-decoration-none material-icons">insert_link</a>
                    <a href="#" @onclick="(()=>PrepareUpload(UploadTypes.Image))" for="fileInput1" class="text-muted text-decoration-none material-icons">image</a>
                    <a href="#" @onclick="(()=>PrepareUpload(UploadTypes.Video))" for="fileInput1" class="text-muted text-decoration-none material-icons">smart_display</a>
                    <span class="text-muted">0/500</span>
                    <InputFile @ref="fileUpload" id="fileInput1" OnChange="UploadFiles" hidden />
                   
                </div>
                <div class="ms-auto m-0">
                    <a href="#" @onclick="PostMessage" class="btn btn-primary rounded-5 fw-bold px-3 py-2 fs-6 mb-0 d-flex align-items-center"><span class="material-icons me-2 md-16">send</span>Post</a>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public Action PostDataChanged { get; set; }
    InputFile fileUpload;
    [Parameter]
    public Post NewPost { get; set; }
    UploadTypes TipeUpload;
    UserProfile selUser;
    public enum UploadTypes {Image, Doc, Video}
    async Task PrepareUpload(UploadTypes tipe)
    {
        TipeUpload = tipe;

        await IJS.InvokeVoidAsync("OpenFileUpload", "fileInput1");
    }
    string ErrorMsg;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string Username;
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            Username = user.Identity.Name;
            selUser = UserSvc.GetItemByUsername(Username);

        }

        if (NewPost == null) NewPost = new();
    }
    async Task PostMessage()
    {
        ErrorMsg = "";

        if (string.IsNullOrEmpty(NewPost.Message))
        {
            ErrorMsg += "Tolong di isi pesan. ";

        }

        if (ErrorMsg.Length > 0)
        {
            toastService.ShowWarning(ErrorMsg, "Perhatian");
            return;
        }

        NewPost.CreatedDate = DateHelper.GetLocalTimeNow();
        NewPost.Id = 0;
        NewPost.UserName = Username;
        //get link if exists
        //var linkParser = new Regex(@"\b(?:https?://|www\.)\S+\b", RegexOptions.Compiled | RegexOptions.IgnoreCase);
        var linkParser = new Regex(@"(http(s)?://)?([\w-]+\.)+[\w-]+(/\S\w[\w- ;,./?%&=]\S*)?", RegexOptions.Compiled | RegexOptions.IgnoreCase);
        var cnt = 0;
        NewPost.LinkUrls = "";
        foreach (Match m in linkParser.Matches(NewPost.Message))
        {
            if (cnt > 0) NewPost.LinkUrls += ";";
            NewPost.LinkUrls += m.Value;
            cnt++;
        }
        //extract hashtag
        var regex = new Regex(@"#\w+");
        var matches = regex.Matches(NewPost.Message);
        cnt = 0;
        NewPost.Hashtags = "";
        foreach (Match m in matches)
        {
            if (cnt > 0) NewPost.Hashtags += ";";
            NewPost.Hashtags += m.Value;
            cnt++;
        }
        //extract mention
        regex = new Regex("(@)((?:[A-Za-z0-9-_]*))");
        matches = regex.Matches(NewPost.Message);
        cnt = 0;
        NewPost.Mentions = "";
        foreach (Match m in matches)
        {
            if (cnt > 0) NewPost.Mentions += ";";
            NewPost.Mentions += m.Value;
            cnt++;
        }


        if (selUser != null)
        {
            NewPost.UserId = selUser.Id;
        }
        if (PostSvc.InsertData(NewPost))
        {
            TrendingSvc.InsertFromPost(selUser, NewPost);
            toastService.ShowSuccess("Posting berhasil.", "Info");
            await IJS.InvokeVoidAsync("CloseModal", "postModal");
            await IJS.InvokeVoidAsync("refreshAll");
            PostDataChanged?.Invoke();
            
        }
        else
        {
            toastService.ShowError("Gagal posting, ga tau kenapa..", "Kecele");
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(ms);
            var bytes = ImageHelper.FixedSize(ms, 800, 600, false);
            string newName = string.Empty;

            newName = $"lampiran_{TipeUpload.ToString()}_{Username}_{DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss")}_{file.Name}";
            var FileUrl = $"{AppConstants.UploadUrlPrefix}{newName}";
            await AzureBlobHelper.UploadFile(newName, bytes);
            switch (TipeUpload)
            {
                case UploadTypes.Doc:
                    NewPost.DocUrls = FileUrl;
                    break;
                case UploadTypes.Image:
                    NewPost.ImageUrls = FileUrl;
                    break;
                case UploadTypes.Video:
                    NewPost.VideoUrls = FileUrl;
                    break;
            }

        }
    }
}
