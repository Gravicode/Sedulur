@page "/explore"
@page "/explore/{Keyword}"

@inject IJSRuntime IJS
@inject PostService PostSvc
@inject UserProfileService UserSvc
@layout MainLayoutCustom
<PageTitle>Explore Sedulur - berbagi informasi untuk kebaikan</PageTitle>

<main class="col col-xl-6 order-xl-2 col-lg-12 order-lg-1 col-md-12 col-sm-12 col-12">
    <div class="main-content">
        <div class="d-flex align-items-center mb-3">
            <a href="index" class="material-icons text-dark text-decoration-none m-none me-3">arrow_back</a>
            <p class="ms-2 mb-0 fw-bold text-body fs-6">Explore</p>
        </div>
        <div class="bg-white rounded-4 overflow-hidden shadow-sm mb-4 mb-lg-0">
            @if (ListPost != null)
                @foreach (var post in ListPost)
                {
                    <!-- Trending Item -->
                    <a href='@($"profile/{post.User.Username}")' class="p-3 border-bottom d-flex align-items-center text-dark text-decoration-none">
                        <div>
                            <div class="text-muted fw-light d-flex align-items-center">
                                <small>@post.User.Pekerjaan</small>
                            </div>
                            <p class="fw-bold mb-0 pe-3">@((MarkupString)post.Message.ParseURL().ParseUsername().ParseHashtag())</p>
                            @if (!string.IsNullOrEmpty(post.Hashtags))
                            {
                                <small class="text-muted">Trending with</small>

                                <br />
                                <span class="text-primary">@post.Hashtags</span>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(post.User.PicUrl))
                        {
                            @*<img src="@(post.ImageUrls)" height="80" class="img-fluid rounded-4 ms-auto" alt="profle-img">*@
                            <img src="@(post.User.PicUrl)" height="80" class="rounded-4 ms-auto" alt="profle-img">
                        }
                        
                    </a>
                }
            
        </div>
    </div>
</main>

@code {
    [Parameter]
    public string Keyword { get; set; }


    [CascadingParameter]
    public MainLayoutCustom Layout { get; set; }
    [Parameter]
    public string UserName { get; set; }

    public List<Post> ListPost { get; set; }
    /*
    Dictionary<long, bool> LikeList = new();

    async Task OpenComment(Post post)
    {
    Layout.CurrentPost = post;
    Layout.NewComment = new();
    //data-bs-toggle="modal" data-bs-target="#commentModal"
    await IJS.InvokeVoidAsync("ShowModal", "commentModal");

        //Layout.ThisCommentPage.Refresh();


        }

        async Task TogglePostLike(Post post, bool Like)
        {
        Like = !Like;
        if (Like)
        {
        PostSvc.LikePost(selUser.Id, selUser.Username, post.Id);
        }
        else
        {
        PostSvc.UnLikePost(selUser.Id, post.Id);
    }
    LikeList[post.Id] = Like;
    }

    public void Refresh()
    {
    LoadData();
    StateHasChanged();
    }
    */
    void LoadData()
    {

        ListPost = PostSvc.FindByKeyword(Keyword);
        OldKeyword = Keyword;
        /*
        if (!string.IsNullOrEmpty(Username))
            {
            LikeList.Clear();
            ListPost.ForEach(x =>
                {
                if (x.PostLikes != null)
                {
                LikeList.Add(x.Id, x.PostLikes.Any(c => c.LikedByUserId == selUser.Id));
                }
                else
                {
                LikeList.Add(x.Id, false);
    }
        });

    }
    */
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string Username;
    UserProfile selUser;
    bool IsLogin = false;
    string OldKeyword;
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            IsLogin = true;
            Username = user.Identity.Name;
            selUser = UserSvc.GetItemByUsername(Username);

        }
        if (string.IsNullOrEmpty(Keyword))
        {
            var trending = PostSvc.GetTrendingTags();
            var trendstr = string.Join(' ', trending);
            Keyword = trendstr;
        }
        LoadData();
    }
    protected override void OnParametersSet()
    {
        if (Keyword != OldKeyword)
        {
            LoadData();
        }
    }
}
